# bot/handlers/payments.py
import os
import django
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from yookassa import Payment
from asgiref.sync import sync_to_async
import logging

logger = logging.getLogger(__name__)

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_app.config.settings")
django.setup()

from django_app.shop.models import Order, TelegramUser


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[-1])

    try:
        user = await sync_to_async(TelegramUser.objects.get)(telegram_id=callback.from_user.id)
        order = await sync_to_async(Order.objects.get)(id=order_id, user=user)

        payment = await sync_to_async(Payment.find_one)(order.payment_id)

        if payment.status == "succeeded":
            order.is_paid = True
            await sync_to_async(order.save)()

            await callback.message.edit_text(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
                "–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑!"
            )
        else:
            await callback.answer(
                "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                show_alert=True
            )

    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã", show_alert=True)
        logger.error(f"Payment check error: {str(e)}")

    await callback.answer()


@router.callback_query(F.data.startswith("test_payment_"))
async def handle_test_payment(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[-1])
        user = await sync_to_async(TelegramUser.objects.get)(telegram_id=callback.from_user.id)
        order = await sync_to_async(Order.objects.get)(id=order_id, user=user)

        # –ü–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
        order.is_paid = True
        await sync_to_async(order.save)()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        return_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üõçÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="cat_page_1")]
            ]
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_text(
            "‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
            "–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑!",
            reply_markup=return_keyboard
        )

    except Exception as e:
        logger.error(f"Test payment error: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ", show_alert=True)

    await callback.answer()


@router.callback_query(F.data == "payment_not_available")
async def show_payment_alert(callback: CallbackQuery):
    await callback.answer(
        text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –∏–∑–≤–∏–Ω–∏—Ç–µ üò¢",
        show_alert=True
    )