import os
import django
import logging
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup

# –í–º–µ—Å—Ç–æ aiogram.utils.html (—É—Å—Ç–∞—Ä–µ–≤—à–µ–µ):
from aiogram.utils.text_decorations import html_decoration as html

from django_app.shop.models import Cart, CartItem, Order, TelegramUser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

class OrderState(StatesGroup):
    waiting_for_address = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_app.config.settings")
django.setup()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

@sync_to_async
def get_or_create_user(tg_id: int) -> TelegramUser:
    """
    –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {tg_id}")
    return TelegramUser.objects.get(telegram_id=tg_id)

@sync_to_async
def get_cart(user: TelegramUser) -> Cart:
    """
    –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    cart, created = Cart.objects.get_or_create(user=user)
    if created:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    return cart

@sync_to_async
def get_cart_items(user: TelegramUser) -> list[CartItem]:
    """
    –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    return list(CartItem.objects.filter(cart__user=user).select_related("product"))

@sync_to_async
def remove_item_from_cart(user: TelegramUser, product_id: int) -> None:
    """
    –£–¥–∞–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –≤ –∏—Ç–æ–≥–µ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ—Ä–∑–∏–Ω—É.
    """
    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    cart = Cart.objects.get(user=user)
    CartItem.objects.filter(cart=cart, product_id=product_id).delete()
    if cart.items.count() == 0:
        cart.delete()
        logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –ø—É—Å—Ç–∞.")

@sync_to_async
def create_order(user: TelegramUser, address: str) -> Order:
    """
    –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º.
    """
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id} –ø–æ –∞–¥—Ä–µ—Å—É: {address}")
    cart = Cart.objects.get(user=user)
    total = sum(item.product.price * item.quantity for item in cart.items.all())

    order = Order.objects.create(
        user=user,
        address=address,
        total=total
    )

    for cart_item in cart.items.all():
        order.items.create(product=cart_item.product, quantity=cart_item.quantity)

    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Order –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart.delete()
    logger.info(f"–ó–∞–∫–∞–∑ {order.id} —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
    return order

@sync_to_async
def get_cart_quantity(user: TelegramUser) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    total = 0
    cart = Cart.objects.filter(user=user).first()
    if cart:
        total = sum(item.quantity for item in cart.items.all())
    return total

@sync_to_async
def get_cart_total(user: TelegramUser) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    total = 0
    cart = Cart.objects.filter(user=user).first()
    if cart:
        for item in cart.items.all():
            total += item.product.price * item.quantity
    return total

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---

def generate_cart_keyboard(items: list[CartItem]) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ—é.
    """
    logger.debug("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ—Ä–∑–∏–Ω—ã")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"‚ùå {item.product.name} x{item.quantity}",
                callback_data=f"remove_item_{item.product.id}"
            )
        ]
        for item in items
    ])

    if items:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        ])

    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu")
    ])

    return keyboard

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def show_cart(user: TelegramUser, message: Message | CallbackQuery) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.
    """
    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    items = await get_cart_items(user)

    if not items:
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="<-- –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])

        if isinstance(message, Message):
            await message.answer(text, reply_markup=kb)
        else:
            await message.message.edit_text(text, reply_markup=kb)
        return

    total = sum(item.product.price * item.quantity for item in items)
    text = (
        html.bold("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:") + "\n\n" +
        "\n".join(
            f"‚Ä¢ {html.quote(item.product.name)} - {item.quantity} —à—Ç. √ó {html.quote(str(item.product.price))}‚ÇΩ"
            for item in items
        ) +
        "\n\n" +
        html.bold(f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ")
    )

    kb = generate_cart_keyboard(items)
    parse_mode = ParseMode.HTML

    try:
        if isinstance(message, Message):
            await message.answer(text, reply_markup=kb, parse_mode=parse_mode)
        else:
            if message.message.photo:
                await message.message.edit_caption(
                    caption=text,
                    reply_markup=kb,
                    parse_mode=parse_mode
                )
            else:
                await message.message.edit_text(
                    text,
                    reply_markup=kb,
                    parse_mode=parse_mode
                )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(text, reply_markup=kb, parse_mode=parse_mode)

@router.callback_query(F.data == "cart")
@router.message(F.text == "/cart")
async def handle_cart(request: Message | CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏/–∫–æ–º–∞–Ω–¥—ã "–ö–æ—Ä–∑–∏–Ω–∞".
    """
    user = await get_or_create_user(request.from_user.id)
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {user.telegram_id}")
    await show_cart(user, request)

@router.callback_query(F.data.startswith("remove_item_"))
async def remove_item(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    user = await get_or_create_user(callback.from_user.id)
    product_id = int(callback.data.split("_")[-1])

    logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
    await remove_item_from_cart(user, product_id)
    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await show_cart(user, callback)

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {callback.from_user.id}")
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass

    msg = await callback.message.answer(
        "üì¶ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
        "(–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É, –¥–æ–º –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É)"
    )

    await state.update_data(address_message_id=msg.message_id)
    await state.set_state(OrderState.waiting_for_address)

@router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext) -> None:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –∞–¥—Ä–µ—Å, —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏ —Å—Ä–∞–∑—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞—Ç—ë–∂. –í—ã–≤–æ–¥–∏–º
    —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª.
    """
    user = await get_or_create_user(message.from_user.id)
    address = message.text.strip()

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}: {address}")
    try:
        order = await create_order(user, address)

        # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ —Å—Ä–∞–∑—É
        payment = await sync_to_async(order.create_payment)()
        if not payment:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")
            await state.clear()
            return

        confirmation_url = payment.confirmation.confirmation_url

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫
        payment_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑",
                    url=confirmation_url
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    callback_data=f"check_payment_{order.id}"
                )
            ]
        ])

        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ {html.bold(f'#{order.id}')} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {html.quote(address)}\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {html.bold(f'{order.total} ‚ÇΩ')}\n\n"
            f"–¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"‚Ä¢ MasterCard: <code>5555 5555 5555 4477</code> (<code>08</code>/<code>28</code>) CVC <code>555</code>\n"
            f"‚Ä¢ Visa: <code>4793 1281 6164 4804</code> (<code>12</code>/<code>28</code>) CVC <code>111</code>\n"
            f"(–≤ –∫–∞—á–µ—Å—Ç–≤–µ SMS –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ —á–∏—Å–ª–æ)",
            reply_markup=payment_kb,
            parse_mode=ParseMode.HTML
        )
    except Cart.DoesNotExist:
        logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –±–µ–∑ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")

    await state.clear()
